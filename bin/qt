#!/usr/bin/env python3
# pylint: disable=invalid-name
"""Script for electron spin polarization and transmission."""
import argparse
import sys
from QuantumTransport import TransportCal, plot_spinpol,plot_spinpol2
#from time_util import *


def main():
    """
    function for qt
    """
    description = """
    Calculation of electron transport
    """
    epilog = """output: percentage (spin polarization) of transmitted electron
    """
    parser = argparse.ArgumentParser(
        usage='%(prog)s [options] ',
        description=description,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=epilog)
    group = parser.add_mutually_exclusive_group()
    parser.add_argument('filename', metavar='filename', type=str, nargs='?', help='input file')
    parser.add_argument('-soc', '--soc_type', type=str, default= None,
           help='SOC for closed shell (CS) or open shell (OS)')
    parser.add_argument('-db', '--debug', action="store_true", 
           help= "debug print")
    parser.add_argument('-l', '--load_qt_dat', action="store_true", 
           help= "load files generated by the qt_dat script")
    parser.add_argument('-fc', '--fock_calc', action="store_true", 
           help= "calculate Fock matrices from MO energies and coeffs")
    parser.add_argument('-p', '--plot_spinpol', action="store_true", 
           help= "plot transmission.txt file")
    parser.add_argument('-la', '--latoms', type=int, default= 0,
           help='left electrode atoms')
    parser.add_argument('-ca', '--catoms', type=int, default= 0,
           help='central atoms')
    parser.add_argument('-c', '--code', type=str, default= 'g16',
           help='g16 (Gaussian) or t24 (Turbomole)')
    args = parser.parse_args()
    if args.load_qt_dat and len(sys.argv) == 0:
        parser.print_help()
        sys.exit(1)
    if args.soc_type == 'CS' or args.soc_type == 'OS':
        args.code = 't24'
    calc=TransportCal(qcfile=args.filename,qccode=args.code,latoms=args.latoms,\
         catoms=args.catoms,soc_type=args.soc_type,load_data= \
         args.load_qt_dat,fock_calc=args.fock_calc,debug=args.debug)
    if args.soc_type == 'CS' or args.soc_type == 'OS':
        calc.soc_transmission()
        if args.plot_spinpol:
            plot_spinpol('transmission.txt','log')
    else:
        calc.radical_transmission()
        if args.plot_spinpol:
            plot_spinpol2('transmission.txt','log')

if __name__ == "__main__":
    main()
